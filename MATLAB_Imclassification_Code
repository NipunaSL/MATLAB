Create and Train a Deep Learning Model
Script for creating and training a deep learning network with the following properties:
Number of layers: 7
Number of connections: 6
Training setup file: C:\Users\nabeysingheherathm2\OneDrive - University of Nebraska-Lincoln\PHD_Data\Image classification examples\trainingSetup_2022_05_29__20_43_21.mat
Run this script to create the network layers, import training and validation data, and train the network. The network layers are stored in the workspace variable layers. The trained network is stored in the workspace variable net.
To learn more, see Generate MATLAB Code From Deep Network Designer.
Auto-generated by MATLAB on 29-May-2022 20:43:23
Load Initial Parameters
Load parameters for network initialization. For transfer learning, the network initialization parameters are the parameters of the initial pretrained network.
trainingSetup = load("C:\Users\nabeysingheherathm2\OneDrive - University of Nebraska-Lincoln\PHD_Data\Image classification examples\trainingSetup_2022_05_29__20_43_21.mat");

Import Data
Import training and validation data.
imdsTrain = imageDatastore("C:\Users\nabeysingheherathm2\OneDrive - University of Nebraska-Lincoln\PHD_Data\Image classification examples\reduced_Database_150","IncludeSubfolders",true,"LabelSource","foldernames");
[imdsTrain, imdsValidation] = splitEachLabel(imdsTrain,0.7);

Augmentation Settings
imageAugmenter = imageDataAugmenter(...
    "RandRotation",[0 90],...
    "RandXReflection",true,...
    "RandYReflection",true);

% Resize the images to match the network input layer.
augimdsTrain = augmentedImageDatastore([384 512 3],imdsTrain,"DataAugmentation",imageAugmenter);
augimdsValidation = augmentedImageDatastore([384 512 3],imdsValidation);

Set Training Options
Specify options to use when training.
opts = trainingOptions("sgdm",...
    "ExecutionEnvironment","multi-gpu",...
    "InitialLearnRate",0.01,...
    "MaxEpochs",1000,...
    "MiniBatchSize",30,...
    "Shuffle","every-epoch",...
    "Plots","training-progress",...
    "ValidationData",augimdsValidation);

Create Array of Layers
layers = [
    imageInputLayer([384 512 3],"Name","imageinput")
    convolution2dLayer([3 3],32,"Name","conv","Padding","same")
    batchNormalizationLayer("Name","batchnorm")
    reluLayer("Name","relu")
    fullyConnectedLayer(3,"Name","fc")
    softmaxLayer("Name","softmax")
    classificationLayer("Name","classoutput")];

Train Network
Train the network using the specified options and training data.
[net, traininfo] = trainNetwork(augimdsTrain,layers,opts);
